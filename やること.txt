●当たり判定の標準化 ❌
●サウンド生成 ❌
●ボリューム設定 ❌
●シェーダー対応 ❌
●Partcile System ❌
●光オブジェクト ❌
●アニメーターの追加 ❌
●GetAnimationOver() を作成 ❌
●animationModelのコンポーネント化 ❌
●alpha to coverage を応用する ❌
●テクスチャを事前に読み込んで、後でそれをLoadする ❌
●カメラからの距離によって　Zソートを行う ❌
●ImGUI 適応 ❌
●立体音響 ❌
●セーブ機能 ❌
●回転可能なBoxCollider ❌


●頂点シェーダーかコンピュータシェーダーに変更する大幅に処理が軽くなる (AnimationModel.cpp 334)

●Unity のようなAnimationBrainを作成すること
●Unity のように、2つのアニメーションの中間区間を再生する BlendState のような機能を追加
●Unity のように、アニメーションのStateMachine機能を追加

●Inverse Kinematics
		https://docs.unity3d.com/ja/2019.4/Manual/InverseKinematics.html
		https://docs.unrealengine.com/4.27/ja/AnimatingObjects/SkeletalMeshAnimation/NodeReference/SkeletalControls/TwoBoneIK/
		https://docs.unrealengine.com/4.27/ja/AnimatingObjects/SkeletalMeshAnimation/NodeReference/SkeletalControls/CCDIK/
		https://docs.unrealengine.com/4.27/ja/AnimatingObjects/SkeletalMeshAnimation/NodeReference/SkeletalControls/HandIKRetargeting/
		https://docs.unrealengine.com/4.27/ja/AnimatingObjects/SkeletalMeshAnimation/NodeReference/Fabrik/
		https://mukai-lab.org/content/CcdParticleInverseKinematics.pdf
		https://zenn.dev/fukazaemon/articles/1eef820cfebad6
		https://techblog.sega.jp/entry/sega_inverse_kinematics202210#f-b5d23c8f

●CULLING
	・ Backface Culling ❌
	・ View Frustum Culling
		https://learnopengl.com/Guest-Articles/2021/Scene/Frustum-Culling
	・ Occlusion Culling
		https://docs.unity3d.com/ja/2019.3/Manual/OcclusionCulling.html
		https://docs.unrealengine.com/5.3/ja/visibility-and-occlusion-culling-in-unreal-engine/
	・ GPU Driven Rendering

●Anti Aliasing
	・ Super Sampling Anti Aliasing (4 x rendering)
	・ Multi Sample Anti Aliasing ❌
	・ Fast Approximate Anti Aliasing
	・ Temporal Anti Aliasing

●空間分割
	・QuadTree
	・OcTree
	・Binary Space Partitioning

●LOD (Level Of Detail)
	・change the number of polygons in a model based on the distance of the object from the camera
		(change the model to billboard if too far to tell)
		Make an LOD Tree component like unity

●Stencil Buffer
	・整数を持って、プログラマーが自由で使うことが出きる

●Geometry Instancing
	・大量のオブジェクトをフレームレートを落とさず描画する仕組み

●SIMD
	・SISD (Single Instruction Single Data)
		一つの命令で一つのデータを処理する
		float a,b = 1,c = 2;
		a = b + c;

	・SIMD (Single Instruction Multiple Data)
		一つの命令で複数の命令を処理する、こっちの方が効率が良い
		D3DXVECTOR3 position, target(0.0f, 0.0f, 0.0f);
		position = target + D3DXVECTOR3(4.0f, 2.0f, 3.0f);

		一見SIMDに見えるが		
		D3DXVECTOR3のoperatorの中に return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);
		結局別々で動いてるってこと
		std::list<>に搭載済み

	・SIMD拡張命令セット
		・MMX
		・3DNow
		・SSD
		・AVX
		・NEON

●経路探索
	・ダイクストラ法
	・A＊法